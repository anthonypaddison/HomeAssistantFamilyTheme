title: Family
theme: FamilyBoard

# ====== Button-card templates ======
button_card_templates:

  # (kept for completeness; no longer used in the sidebar)
  family_icon:
    show_name: false
    show_icon: true
    styles:
      card:
        - width: 56px
        - height: 56px
        - border-radius: 0px
        - box-shadow: none
        - background: var(--sb-inactive-bg)
        - color: var(--sb-inactive-icon)
        - display: grid
        - place-items: center
        - position: relative
        - padding: 0
    icon:
      - width: 28px
      - height: 28px
    card_mod:
      style: |
        ha-icon, mwc-icon, .button-card-icon {
          color: var(--sb-inactive-icon) !important;
          --mdc-icon-size: 28px !important;
          width: 28px !important;
          height: 28px !important;
          opacity: 1 !important;
          filter: none !important;
        }

  # Sidebar item with badge (Calendar/Chores)
  sb_icon_only:
    show_name: false
    show_icon: true
    variables:
      section: ""
      badge_entity: ""
    card_mod:
      style: |
        ha-icon, mwc-icon, .button-card-icon {
          color: var(--sb-inactive-icon) !important;
          --mdc-icon-size: 28px !important;
          width: 28px !important; height: 28px !important;
          opacity: 1 !important; filter: none !important;
        }
        :host {
          /* Change to #ef4444 if you want red */
          --sb-badge-border-color: #000000;
        }
    custom_fields:
      badge: >
        [[[
          const id = variables.badge_entity;
          const st = id ? states[id]?.state : undefined;
          const n = Number(st);
          return Number.isFinite(n) && n > 0 ? `${n}` : '';
        ]]]
    styles:
      card:
        - width: 100% !important
        - height: 64px           # a touch taller than before
        - border-radius: 0px
        - box-shadow: none
        - background: var(--sb-inactive-bg)   # <— fill the tile
        - display: flex
        - align-items: center
        - justify-content: flex-start         # <— left align
        - padding: 0 16px
        - margin: 0
        - overflow: visible
      icon:
        - width: 28px
        - height: 28px
        - color: var(--sb-inactive-icon) !important
      custom_fields:
        badge:
          - position: absolute
          - top: -6px
          - right: -6px
          - min-width: 22px
          - height: 22px
          - border-radius: 11px
          - background: white
          - color: var(--sb-badge-border-color)
          - font-weight: 800
          - font-size: 12px
          - line-height: 22px
          - display: >
              [[[
                const id = variables.badge_entity;
                const st = id ? states[id]?.state : undefined;
                const n = Number(st);
                return Number.isFinite(n) && n > 0 ? 'flex' : 'none';
              ]]]
          - align-items: center
          - justify-content: center
          - border: 2px solid var(--sb-badge-border-color)
          - z-index: 2
    state:
      - operator: template
        value: '[[[ return states["input_select.family_section"]?.state === variables.section; ]]]'
        styles:
          card:
            - background: var(--sb-active-bg) !important
            - color: var(--sb-active-icon) !important
        card_mod:
          style: |
            ha-icon, mwc-icon, .button-card-icon {
              color: var(--sb-active-icon) !important;
            }

  # Compact progress chip: name, icon, bar, "completed / total".
  due_today_progress_chip:
    show_name: true
    tap_action: { action: none }
    variables:
      name: "unknown"
      icon: mdi:checkbox-marked-circle
      color: var(--primary-color)
      completed: ""
      outstanding: ""
    styles:
      card:
        - padding: 6px 10px
        - border-radius: 14px
        - background: '[[[ return variables.color ?? "var(--primary-color)"; ]]]'
        - min-height: 56px
        - box-shadow: none
      grid:
        - grid-template-areas: "'i n v' 'bar bar bar'"
        - grid-template-columns: 20px auto auto
        - grid-template-rows: auto 4px
        - column-gap: 8px
      img_cell: [ align-self: center, justify-self: start ]
      icon: [ width: 18px, height: 18px, color: '#0F172A' ]
      name: [ font-weight: '800', color: '#0F172A', font-size: 13px, line-height: 16px ]
      custom_fields:
        v: [ align-self: center, justify-self: end, font-size: 12px, font-weight: 800, color: '#0F172A' ]
        bar: [ width: 100%, height: 4px, border-radius: 2px, background: 'rgba(0,0,0,.15)', position: relative, overflow: hidden ]
    name: '[[[ return variables.name; ]]]'
    icon: '[[[ return variables.icon; ]]]'
    custom_fields:
      v: >
        [[[
          const done = Number(states[variables.completed]?.state) || 0;
          const rem  = Number(states[variables.outstanding]?.state) || 0;
          const total = Math.max(0, done + rem);
          return `${done}/${total}`;
        ]]]
      bar: >
        [[[
          const done = Number(states[variables.completed]?.state) || 0;
          const rem  = Number(states[variables.outstanding]?.state) || 0;
          const total = Math.max(0, done + rem);
          const pct = total ? Math.min(100, Math.round(done / total * 100)) : 0;
          return `<div style="position:absolute;inset:0;background:rgba(255,255,255,.85);transform-origin:left;transform:scaleX(${pct/100});"></div>`;
        ]]]

# ====== VIEWS ======
views:
  - title: Family
    path: family
    panel: true
    type: custom:grid-layout
    card_mod:
      style: |
        :host {
          height: 100vh !important;
          width: 100vw;
          margin: 0 !important;
          padding: 0 !important;
        }
        hui-view {
          height: 100% !important;
          padding: 0 !important;
          margin: 0 !important;
        }
        /* grid-layout container */
        #root, .layout, .grid, .horizontal, .vertical {
          height: 100% !important;
          margin: 0 !important;
          padding: 0 !important;
        }
    layout:
      margin: 0px
      height: 100vh
      padding: 0px
      # --- widened sidebar rail
      grid-template-columns: 88px 1fr
      grid-template-rows: auto auto minmax(0, 1fr)
      grid-template-areas: |
        "sidebar heading"
        "sidebar chips"
        "sidebar main"
      gap: 0px
      column-gap: 0px
      row-gap: 0px

    cards:

      # 1) SIDEBAR (Calendar + Chores only)
      - type: custom:mod-card
        view_layout: { grid-area: sidebar }
        card_mod:
          style: |
            :host { height: 100vh !important; align-self: stretch; }
            ha-card {
              height: 100vh !important;
              background: var(--app-header-background-color) !important;
              border-radius: 0;
              padding: 0;
              margin: 0 !important;
              box-shadow: none;
              border-right: none;
            }
        card: !include /config/sidebar_menu.yaml

      # 2) HEADING ROW (Left: next event; Center: time above date; Right: empty)
      - type: custom:mod-card
        view_layout: { grid-area: heading }
        card_mod:
          style: |
            ha-card {
              box-sizing: border-box;
              width: 100%;
              background: var(--app-header-background-color) !important;
              border-radius: 0 !important;
              margin: 0 !important;
              padding: 8px 12px !important;
              color: #FFFFFF !important;
              min-height: var(--family-heading-height, 56px);
              align-items: center;
            }
        card:
          type: custom:button-card
          show_icon: false
          show_name: false
          show_state: false
          styles:
            card: [ background: transparent, box-shadow: none, padding: 0, color: "#000000 !important" ]
            grid:
              - grid-template-areas: "'left center right'"
              - grid-template-columns: 1fr auto 1fr
              - align-items: center
              - column-gap: 12px
            custom_fields:
              left: [ justify-self: start, font-weight: 700, font-size: 14px, line-height: 1.2, white-space: nowrap, overflow: hidden, text-overflow: ellipsis ]
              center:
                - justify-self: center
              right: [ justify-self: end ]
          custom_fields:
            left: >
              [[[
                const s = states['input_text.up_next_family_md']?.state;
                return s && s !== 'unknown' && s !== 'unavailable' ? s : 'No upcoming events';
              ]]]
            center: >
              [[[
                const d = new Date();
                const time = d.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
                const date = d.toLocaleDateString('en-GB', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' });
                return `<div style="display:grid;place-items:center;line-height:1.1">
                  <div style="font-weight:800;font-size:28px">${time}</div>
                  <div style="margin-top:4px;font-weight:600;font-size:14px;opacity:.85">${date}</div>
                </div>`;
              ]]]
            right: >
              [[[ return ''; ]]]
          triggers_update:
            - sensor.time
            - input_text.up_next_family_md

      # 3) CHIPS ROW (progress per person)
      - type: custom:mod-card
        view_layout: { grid-area: chips }
        card_mod:
          style: |
            ha-card {
              box-sizing: border-box;
              width: 100%;
              background: var(--app-header-background-color) !important;
              border-radius: 0 !important;
              margin: 0 !important;
              padding: 6px 12px !important;
              min-height: var(--family-chips-height, 56px);
              align-items: center;
            }
        card:
          type: grid
          columns: 5
          square: false
          cards:
            - type: custom:button-card
              template: due_today_progress_chip
              variables:
                name: Family
                icon: mdi:account-group
                color: var(--family-color-family)
                completed: input_number.completed_due_today_family
                outstanding: input_number.outstanding_family_today
              tap_action:
                action: call-service
                service: script.open_person_view
                service_data:
                  browser_id: '[[[ return window.browser_mod?.browserID ?? null; ]]]'
                  person: Family

            - type: custom:button-card
              template: due_today_progress_chip
              variables:
                name: Anthony
                icon: mdi:laptop
                color: var(--family-color-anthony)
                completed: input_number.completed_due_today_anthony
                outstanding: input_number.outstanding_anthony_today
              tap_action:
                action: call-service
                service: script.open_person_view
                service_data:
                  browser_id: '[[[ return window.browser_mod?.browserID ?? null; ]]]'
                  person: Anthony

            - type: custom:button-card
              template: due_today_progress_chip
              variables:
                name: Joy
                icon: mdi:book-open-variant
                color: var(--family-color-joy)
                completed: input_number.completed_due_today_joy
                outstanding: input_number.outstanding_joy_today
              tap_action:
                action: call-service
                service: script.open_person_view
                service_data:
                  browser_id: '[[[ return window.browser_mod?.browserID ?? null; ]]]'
                  person: Joy

            - type: custom:button-card
              template: due_today_progress_chip
              variables:
                name: Lizzie
                icon: mdi:teddy-bear
                color: var(--family-color-lizzie)
                completed: input_number.completed_due_today_lizzie
                outstanding: input_number.outstanding_lizzie_today
              tap_action:
                action: call-service
                service: script.open_person_view
                service_data:
                  browser_id: '[[[ return window.browser_mod?.browserID ?? null; ]]]'
                  person: Lizzie

            - type: custom:button-card
              template: due_today_progress_chip
              variables:
                name: Toby
                icon: mdi:soccer
                color: var(--family-color-toby)
                completed: input_number.completed_due_today_toby
                outstanding: input_number.outstanding_toby_today
              tap_action:
                action: call-service
                service: script.open_person_view
                service_data:
                  browser_id: '[[[ return window.browser_mod?.browserID ?? null; ]]]'
                  person: Toby

      # 4) MAIN AREA — Calendar + Chores only
      - type: conditional
        view_layout: { grid-area: main }
        conditions:
          - condition: state
            entity: input_select.family_section
            state: Calendar
        card:
          type: vertical-stack
          cards:

            # Toggle (Day / 5-Day / Month) — hidden when Month active
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.calendar_view
                  state_not: "Month"
              card:
                type: custom:mod-card
                card_mod:
                  style: |
                    ha-card { background: transparent; box-shadow: none; padding: 0; }
                    .card-content { display: flex; justify-content: flex-end; gap: 8px; }
                card:
                  type: horizontal-stack
                  cards:
                    - type: custom:button-card
                      name: Day
                      icon: mdi:calendar-today
                      tap_action: { action: call-service, service: input_select.select_option, target: { entity_id: input_select.calendar_view }, data: { option: Day } }
                      styles:
                        card: [ height: 36px, padding: "4px 10px", border-radius: 10px, background: var(--card-background-color) ]
                        name: [ font-size: 12px, font-weight: 700 ]
                        icon: [ width: 16px, height: 16px ]

                    - type: custom:button-card
                      name: 5-Day
                      icon: mdi:calendar-range
                      tap_action: { action: call-service, service: input_select.select_option, target: { entity_id: input_select.calendar_view }, data: { option: "5-Day" } }
                      styles:
                        card: [ height: 36px, padding: "4px 10px", border-radius: 10px, background: var(--card-background-color) ]
                        name: [ font-size: 12px, font-weight: 700 ]
                        icon: [ width: 16px, height: 16px ]

                    - type: custom:button-card
                      name: Month
                      icon: mdi:calendar-month
                      tap_action: { action: call-service, service: input_select.select_option, target: { entity_id: input_select.calendar_view }, data: { option: Month } }
                      styles:
                        card: [ height: 36px, padding: "4px 10px", border-radius: 10px, background: var(--card-background-color) ]
                        name: [ font-size: 12px, font-weight: 700 ]
                        icon: [ width: 16px, height: 16px ]

            # Day
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.calendar_view
                  state: Day
              card: !include /config/calendar_day.yaml

            # 5-Day
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.calendar_view
                  state: "5-Day"
              card: !include /config/calendar_5day.yaml

            # Month
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.calendar_view
                  state: Month
              card: !include /config/calendar_month.yaml

      - type: conditional
        view_layout: { grid-area: main }
        conditions:
          - condition: state
            entity: input_select.family_section
            state: Chores
        card:
          type: vertical-stack
          cards:
            - type: grid
              columns: 3
              square: false
              cards:
                # Anthony
                - type: vertical-stack
                  cards:
                    - type: custom:button-card
                      icon: mdi:laptop
                      name: "Anthony"
                      styles:
                        card: &header_card
                          - background: transparent
                          - box-shadow: none
                          - padding: 4px 0 0
                        name:
                          - color: var(--family-color-anthony)
                          - font-weight: 800
                          - font-size: 14px
                        icon:
                          - color: var(--family-color-anthony)
                          - width: 18px
                          - height: 18px
                      show_state: false
                      show_label: false
                    - type: todo-list
                      entity: todo.anthony
                      hide_completed: false
                      card_mod:
                        style: |
                          :host, ha-card { color: var(--family-color-anthony); }
                          ul { display: flex; flex-direction: column; gap: 6px; }
                          li {
                            min-height: 34px !important; border-radius: 18px;
                            padding: 2px 10px !important; position: relative;
                          }
                          li:nth-child(odd)  { background: rgba(0,0,0,0.00); border: 1px solid rgba(0,0,0,0.00); }
                          li:nth-child(even) { background: color-mix(in srgb, currentColor 14%, transparent); border: 1px solid color-mix(in srgb, currentColor 30%, transparent); }
                          ha-todo-list[slot="add"],
                          ha-todo-list .add, ha-todo-list .add-item, ha-todo-list mwc-textfield,
                          ha-todo-list #add, ha-todo-list ha-icon-button[slot="add"] { display:none !important; }
                          mwc-checkbox {
                            --mdc-checkbox-unchecked-color: #CBD5E1;
                            --mdc-checkbox-checked-color: var(--family-color-family);
                            --mdc-checkbox-mark-color: #FFFFFF;
                            transform: scale(1.4);
                            margin-right: 8px;
                            opacity: 0;
                            position: absolute; inset: 0;
                            width: 100%;
                            height: 100%;
                            margin: 0 !important;
                            pointer-events: auto;
                          }
                          mwc-checkbox::before {
                            content:''; position:absolute; left:6px; top:50%; translate:0 -50%;
                            width:32px; height:32px; border-radius:16px;
                          }

                # Joy
                - type: vertical-stack
                  cards:
                    - type: custom:button-card
                      icon: mdi:book-open-variant
                      name: "Joy"
                      styles:
                        card: *header_card
                        name:
                          - color: var(--family-color-joy)
                          - font-weight: 800
                          - font-size: 14px
                        icon:
                          - color: var(--family-color-joy)
                          - width: 18px
                          - height: 18px
                      show_state: false
                      show_label: false
                    - type: todo-list
                      entity: todo.joy
                      hide_completed: false
                      card_mod:
                        style: |
                          :host, ha-card { color: var(--family-color-joy); }
                          ul { display: flex; flex-direction: column; gap: 6px; }
                          li {
                            min-height: 34px !important; border-radius: 18px;
                            padding: 2px 10px !important; position: relative;
                          }
                          li:nth-child(odd)  { background: rgba(0,0,0,0.00); border: 1px solid rgba(0,0,0,0.00); }
                          li:nth-child(even) { background: color-mix(in srgb, currentColor 14%, transparent); border: 1px solid color-mix(in srgb, currentColor 30%, transparent); }
                          ha-todo-list[slot="add"],
                          ha-todo-list .add, ha-todo-list .add-item, ha-todo-list mwc-textfield,
                          ha-todo-list #add, ha-todo-list ha-icon-button[slot="add"] { display:none !important; }
                          mwc-checkbox {
                            --mdc-checkbox-unchecked-color: #CBD5E1;
                            --mdc-checkbox-checked-color: var(--family-color-family);
                            --mdc-checkbox-mark-color: #FFFFFF;
                            transform: scale(1.4);
                            margin-right: 8px;
                            opacity: 0;
                            width: 24px; min-width: 24px; height: 24px;
                          }
                          mwc-checkbox::before {
                            content:''; position:absolute; left:6px; top:50%; translate:0 -50%;
                            width:32px; height:32px; border-radius:16px;
                          }

                # Family
                - type: vertical-stack
                  cards:
                    - type: custom:button-card
                      icon: mdi:account-group
                      name: "Family"
                      styles:
                        card: *header_card
                        name:
                          - color: var(--family-color-family)
                          - font-weight: 800
                          - font-size: 14px
                        icon:
                          - color: var(--family-color-family)
                          - width: 18px
                          - height: 18px
                      show_state: false
                      show_label: false
                    - type: todo-list
                      entity: todo.family
                      hide_completed: false
                      card_mod:
                        style: |
                          :host, ha-card { color: var(--family-color-family); }
                          ul { display: flex; flex-direction: column; gap: 6px; }
                          li {
                            min-height: 34px !important; border-radius: 18px;
                            padding: 2px 10px !important; position: relative;
                          }
                          li:nth-child(odd)  { background: rgba(0,0,0,0.00); border: 1px solid rgba(0,0,0,0.00); }
                          li:nth-child(even) { background: color-mix(in srgb, currentColor 14%, transparent); border: 1px solid color-mix(in srgb, currentColor 30%, transparent); }
                          ha-todo-list[slot="add"],
                          ha-todo-list .add, ha-todo-list .add-item, ha-todo-list mwc-textfield,
                          ha-todo-list #add, ha-todo-list ha-icon-button[slot="add"] { display:none !important; }
                          mwc-checkbox {
                            --mdc-checkbox-unchecked-color: #CBD5E1;
                            --mdc-checkbox-checked-color: var(--family-color-family);
                            --mdc-checkbox-mark-color: #FFFFFF;
                            transform: scale(1.4);
                            margin-right: 8px;
                            opacity: 0;
                            width: 24px; min-width: 24px; height: 24px;
                          }
                          mwc-checkbox::before {
                            content:''; position:absolute; left:6px; top:50%; translate:0 -50%;
                            width:32px; height:32px; border-radius:16px;
                          }

            - type: grid
              columns: 2
              square: false
              cards:
                # Lizzie
                - type: vertical-stack
                  cards:
                    - type: todo-list
                      entity: todo.lizzie
                      hide_completed: false
                      card_mod:
                        style: |
                          :host, ha-card { color: var(--family-color-lizzie); }
                          ul { display: flex; flex-direction: column; gap: 8px; }
                          li {
                            min-height: 34px !important; border-radius: 18px;
                            padding: 2px 10px !important; position: relative;
                          }
                          li:nth-child(odd)  { background: rgba(0,0,0,0.00); border: 1px solid rgba(0,0,0,0.00); }
                          li:nth-child(even) { background: color-mix(in srgb, currentColor 14%, transparent); border: 1px solid color-mix(in srgb, currentColor 30%, transparent); }
                          ha-todo-list[slot="add"],
                          ha-todo-list .add, ha-todo-list .add-item, ha-todo-list mwc-textfield,
                          ha-todo-list #add, ha-todo-list ha-icon-button[slot="add"] { display:none !important; }
                          mwc-checkbox {
                            --mdc-checkbox-unchecked-color: #CBD5E1;
                            --mdc-checkbox-checked-color: var(--family-color-family);
                            --mdc-checkbox-mark-color: #FFFFFF;
                            transform: scale(1.4);
                            margin-right: 8px;
                            opacity: 0;
                            width: 24px; min-width: 24px; height: 24px;
                          }
                          mwc-checkbox::before {
                            content:''; position:absolute; left:6px; top:50%; translate:0 -50%;
                            width:32px; height:32px; border-radius:16px;
                          }
                    - type: custom:button-card
                      icon: mdi:star-four-points-outline
                      name: >
                        [[[ return 'Next up: ' + (states["sensor.next_up_lizzie"]?.state ?? 'All done!'); ]]]
                      show_state: false
                      styles:
                        card:
                          - background: 'color-mix(in srgb, var(--family-color-lizzie) 15%, transparent)'
                          - border: 1px solid color-mix(in srgb, var(--family-color-lizzie) 35%, transparent)
                          - padding: 8px
                          - border-radius: 10px
                          - box-shadow: none
                          - margin-top: 8px
                        icon: [ color: var(--family-color-lizzie) ]

                # Toby
                - type: vertical-stack
                  cards:
                    - type: todo-list
                      entity: todo.toby
                      hide_completed: false
                      card_mod:
                        style: |
                          :host, ha-card { color: var(--family-color-toby); }
                          ul { display: flex; flex-direction: column; gap: 8px; }
                          li {
                            min-height: 34px !important; border-radius: 18px;
                            padding: 2px 10px !important; position: relative;
                          }
                          li:nth-child(odd)  { background: rgba(0,0,0,0.00); border: 1px solid rgba(0,0,0,0.00); }
                          li:nth-child(even) { background: color-mix(in srgb, currentColor 14%, transparent); border: 1px solid color-mix(in srgb, currentColor 30%, transparent); }
                          ha-todo-list[slot="add"],
                          ha-todo-list .add, ha-todo-list .add-item, ha-todo-list mwc-textfield,
                          ha-todo-list #add, ha-todo-list ha-icon-button[slot="add"] { display:none !important; }
                          mwc-checkbox {
                            --mdc-checkbox-unchecked-color: #CBD5E1;
                            --mdc-checkbox-checked-color: var(--family-color-family);
                            --mdc-checkbox-mark-color: #FFFFFF;
                            transform: scale(1.4);
                            margin-right: 8px;
                            opacity: 0;
                            width: 24px; min-width: 24px; height: 24px;
                          }
                          mwc-checkbox::before {
                            content:''; position:absolute; left:6px; top:50%; translate:0 -50%;
                            width:32px; height:32px; border-radius:16px;
                          }
                    - type: custom:button-card
                      icon: mdi:star-four-points-outline
                      name: >
                        [[[ return 'Next up: ' + (states["sensor.next_up_toby"]?.state ?? 'All done!'); ]]]
                      show_state: false
                      styles:
                        card:
                          - background: 'color-mix(in srgb, var(--family-color-toby) 15%, transparent)'
                          - border: 1px solid color-mix(in srgb, var(--family-color-toby) 35%, transparent)
                          - padding: 8px
                          - border-radius: 10px
                          - box-shadow: none
                          - margin-top: 8px
                        icon: [ color: var(--family-color-toby) ]

      # 5) Floating FAB (context-aware add)
      - type: custom:button-card
        icon: mdi:plus
        show_name: false
        show_icon: true
        tap_action:
          action: call-service
          service: script.family_fab_open
          service_data:
            browser_id: '[[[ return window.browser_mod?.browserID ?? null; ]]]'
        styles:
          card:
            - position: fixed
            - right: 24px
            - bottom: 24px
            - width: 56px
            - height: 56px
            - border-radius: 28px
            - box-shadow: 0 8px 24px rgba(0,0,0,0.22)
            - padding: 0
            - z-index: 2001
            - pointer-events: auto
            - background: >
                [[[
                  const s = states['input_select.family_section']?.state ?? 'Calendar';
                  const root = getComputedStyle(document.documentElement);
                  const pick = (n, f) => (root.getPropertyValue(n)?.trim() || f);
                  const map = {
                    Calendar: pick('--fab-color-calendar','var(--primary-color)'),
                    Chores:   pick('--fab-color-chores','var(--primary-color)'),
                  };
                  return map[s] || pick('--fab-color-default','var(--primary-color)');
                ]]]
        icon: [ width: 28px, height: 28px ]

  # Invisible Person Detail View
  - title: Person
    path: person
    visible: false
    cards:
      - type: custom:mod-card
        card_mod:
          style: |
            ha-card { background: var(--card-background-color); border-radius: 0; padding: 12px; }
        card:
          type: vertical-stack
          cards:
            - type: markdown
              content: >
                ## {{ states('input_select.active_person') }} - To-dos
            - type: conditional
              conditions: [ { condition: state, entity: input_select.active_person, state: Family } ]
              card: { type: todo-list, entity: todo.family, hide_completed: false }
            - type: conditional
              conditions: [ { condition: state, entity: input_select.active_person, state: Anthony } ]
              card: { type: todo-list, entity: todo.anthony, hide_completed: false }
            - type: conditional
              conditions: [ { condition: state, entity: input_select.active_person, state: Joy } ]
              card: { type: todo-list, entity: todo.joy, hide_completed: false }
            - type: conditional
              conditions: [ { condition: state, entity: input_select.active_person, state: Lizzie } ]
              card: { type: todo-list, entity: todo.lizzie, hide_completed: false }
            - type: conditional
              conditions: [ { condition: state, entity: input_select.active_person, state: Toby } ]
              card: { type: todo-list, entity: todo.toby, hide_completed: false }
