add_calendar_event:
  alias: Add Calendar Event
  mode: single
  sequence:
    - variables:
        # Form values
        title: "{{ states('input_text.calendar_event_title') | trim }}"           # CHANGE: add pipe
        desc: "{{ states('input_text.calendar_event_description') | trim }}"      # CHANGE: add pipe
        start_dt: "{{ states('input_datetime.calendar_event_start') }}"
        end_dt: "{{ states('input_datetime.calendar_event_end') }}"
        all_day: "{{ is_state('input_boolean.calendar_all_day', 'on') | bool }}"  # CHANGE: cast to bool

        # Local date strings (for all-day events)
        start_date_str: "{{ as_datetime(start_dt) | as_local | timestamp_custom('%Y-%m-%d') }}"  # CHANGE: add pipes
        end_date_str:   "{{ as_datetime(end_dt)   | as_local | timestamp_custom('%Y-%m-%d') }}"  # (kept for completeness)

        # Local ISO-like datetimes for timed events
        start_iso: "{{ as_datetime(start_dt) | as_local | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}"  # CHANGE: add pipes
        end_iso:   "{{ as_datetime(end_dt)   | as_local | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}"  # CHANGE: add pipes

        # If end <= start, use start + 60 minutes (prevents zero/negative duration)
        end_iso_effective: >-
          {% set s = as_datetime(start_dt) | as_local %}
          {% set e = as_datetime(end_dt)   | as_local %}
          {% if e <= s %}{{ (s + timedelta(minutes=60)).strftime('%Y-%m-%dT%H:%M:%S') }}
          {% else %}{{ e.strftime('%Y-%m-%dT%H:%M:%S') }}{% endif %}

        # For all-day events, end_date must be the day AFTER the last day
        end_date_all_day: >-
          {% set sd = as_datetime(start_dt) | as_local %}
          {% set ed = as_datetime(end_dt)   | as_local %}
          {% if ed.date() <= sd.date() %}
            {{ (sd + timedelta(days=1)).date() }}
          {% else %}
            {{ (ed + timedelta(days=1)).date() }}
          {% endif %}

    # Require a non-empty title
    - condition: template
      value_template: "{{ title != '' }}"

    # Create the event
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ all_day }}"
          sequence:
            - service: calendar.create_event
              target:
                entity_id: calendar.family   # change if your calendar entity differs
              data:
                summary: "{{ title }}"
                description: "{{ desc }}"
                start_date: "{{ start_date_str }}"
                end_date: "{{ end_date_all_day }}"
      default:
        - service: calendar.create_event
          target:
            entity_id: calendar.family
          data:
            summary: "{{ title }}"
            description: "{{ desc }}"
            start_date_time: "{{ start_iso }}"
            end_date_time: "{{ end_iso_effective }}"

    # Toast
    - service: browser_mod.notification
      data:
        message: 'Saved "{{ title }}"'
        duration: 2500

    # Reset helpers (set end = start + 60 min by default)  # CHANGE: improved defaults
    - variables:
        _now_local: "{{ now() | as_local }}"
    - service: input_datetime.set_datetime
      target: { entity_id: input_datetime.calendar_event_start }
      data:
        datetime: "{{ _now_local.timestamp_custom('%Y-%m-%d %H:%M:%S') }}"
    - service: input_datetime.set_datetime
      target: { entity_id: input_datetime.calendar_event_end }
      data:
        datetime: "{{ (_now_local + timedelta(minutes=60)).timestamp_custom('%Y-%m-%d %H:%M:%S') }}"
    - service: input_text.set_value
      target: { entity_id: input_text.calendar_event_title }
      data: { value: "" }
    - service: input_text.set_value
      target: { entity_id: input_text.calendar_event_description }
      data: { value: "" }
    - service: input_boolean.turn_off
      target: { entity_id: input_boolean.calendar_all_day }
    - service: browser_mod.close_popup